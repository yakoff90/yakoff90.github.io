/**
 * Lampa Track Finder v3.0 - (UA-Finder)
 * --------------------------------------------------------------------------------
 * –¶–µ–π –ø–ª–∞–≥—ñ–Ω –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –ø–æ—à—É–∫—É —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å
 * —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –∞—É–¥—ñ–æ–¥–æ—Ä—ñ–∂–æ–∫ —É —Ä–µ–ª—ñ–∑–∞—Ö, –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —á–µ—Ä–µ–∑ Jacred API.
 * --------------------------------------------------------------------------------
 * –û—Å–Ω–æ–≤–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ:
 * - –®—É–∫–∞—î –∑–≥–∞–¥–∫–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –¥–æ—Ä—ñ–∂–æ–∫ (Ukr, 2xUkr —ñ —Ç.–¥.) —É –Ω–∞–∑–≤–∞—Ö —Ç–æ—Ä—Ä–µ–Ω—Ç—ñ–≤.
 * - –Ü–≥–Ω–æ—Ä—É—î —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ —Å—É–±—Ç–∏—Ç—Ä–∏, –∞–Ω–∞–ª—ñ–∑—É—é—á–∏ –ª–∏—à–µ —á–∞—Å—Ç–∏–Ω—É –Ω–∞–∑–≤–∏ –¥–æ —Å–ª–æ–≤–∞ "sub".
 * - –í–∏–∫–æ–Ω—É—î –ø–∞—Ä–∞–ª–µ–ª—å–Ω–∏–π –ø–æ—à—É–∫ –∑–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ—é —Ç–∞ –ª–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω–æ—é –Ω–∞–∑–≤–æ—é –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –æ—Ö–æ–ø–ª–µ–Ω–Ω—è.
 * - –û–±–∏—Ä–∞—î —Ä–µ–ª—ñ–∑ –∑ –Ω–∞–π–±—ñ–ª—å—à–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –∑–Ω–∞–π–¥–µ–Ω–∏—Ö —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –¥–æ—Ä—ñ–∂–æ–∫.
 * - –ú–∞—î –Ω–∞–¥—ñ–π–Ω–∏–π –¥–≤–æ—Ä—ñ–≤–Ω–µ–≤–∏–π —Ñ—ñ–ª—å—Ç—Ä –¥–ª—è —Ä–æ–∑—Ä—ñ–∑–Ω–µ–Ω–Ω—è —Ñ—ñ–ª—å–º—ñ–≤ —Ç–∞ —Å–µ—Ä—ñ–∞–ª—ñ–≤.
 * - –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –∫–∞—Ä—Ç–æ–∫ (–¥–µ–±–∞—É–Ω—Å–∏–Ω–≥) –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø—Ä–æ–ø—É—Å–∫—ñ–≤ —Ç–∞ –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ.
 * - –í—ñ–¥–æ–±—Ä–∞–∂–∞—î –º—ñ—Ç–∫—É –Ω–∞ –ø–æ—Å—Ç–µ—Ä–∞—Ö (–¥–∏–Ω–∞–º—ñ—á–Ω–æ –∞–¥–∞–ø—Ç—É—î—Ç—å—Å—è –¥–æ –ø—Ä–∏—Å—É—Ç–Ω–æ—Å—Ç—ñ –ø–ª–∞–≥—ñ–Ω–∞ RatingUp).
 * - –ú–∞—î —Å–∏—Å—Ç–µ–º—É –∫–µ—à—É–≤–∞–Ω–Ω—è –¥–ª—è –∑–º–µ–Ω—à–µ–Ω–Ω—è –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –ø—Ä–∏—à–≤–∏–¥—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏.
 * - –ù–µ –≤–∏–∫–æ–Ω—É—î –ø–æ—à—É–∫ –¥–ª—è –º–∞–π–±—É—Ç–Ω—ñ—Ö —Ä–µ–ª—ñ–∑—ñ–≤ –∞–±–æ —Ä–µ–ª—ñ–∑—ñ–≤ –∑ –Ω–µ–≤—ñ–¥–æ–º–æ—é –¥–∞—Ç–æ—é.
 * --------------------------------------------------------------------------------
 * - üü© –î–û–î–ê–ù–û: –û–ø—Ü—ñ—è 'DISPLAY_MODE' –≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó.
 * - üü© –¢–µ–ø–µ—Ä –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–º–∏–∫–∞—Ç–∏ –≤–∏–≥–ª—è–¥ –º—ñ—Ç–∫–∏ –º—ñ–∂ —Ç–µ–∫—Å—Ç–æ–º ('text' -> "Ukr") —Ç–∞ –ø—Ä–∞–ø–æ—Ä–æ–º ('flag' -> "üá∫üá¶") (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "2xUkr" –∞–±–æ "2xüá∫üá¶").
 * - üü© –ü–æ–≤–Ω—ñ—Å—Ç—é –ø–µ—Ä–µ—Ä–æ–±–ª–µ–Ω–æ –ª–æ–≥—ñ–∫—É `processListCard` –Ω–∞ —ñ–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω—É.
 * - üü© –ú—ñ—Ç–∫–∏, —â–æ –∑–Ω–∏–∫–∞–ª–∏ –ø—Ä–∏ –ø–µ—Ä–µ–º–∞–ª—å–æ–≤—É–≤–∞–Ω–Ω—ñ DOM, —Ç–µ–ø–µ—Ä –º–∏—Ç—Ç—î–≤–æ –≤—ñ–¥–Ω–æ–≤–ª—é—é—Ç—å—Å—è –∑ –∫–µ—à—É.
 * - üü© "–ü—Ä–∏–º–∞—Ä–Ω—ñ" –º—ñ—Ç–∫–∏ (—Ö–∏–±–Ω–∏–π –∫–µ—à) —Ç–µ–ø–µ—Ä –∫–æ—Ä–µ–∫—Ç–Ω–æ –≤–∏–¥–∞–ª—è—é—Ç—å—Å—è –ø—ñ–¥ —á–∞—Å 6-–≥–æ–¥–∏–Ω–Ω–æ–≥–æ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.
 * - üü© –ó–±–µ—Ä–µ–∂–µ–Ω–æ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó (–¥–µ–±–∞—É–Ω—Å, –ø–∞–∫–µ—Ç–Ω–∞ –æ–±—Ä–æ–±–∫–∞) –∑ v2.7.
 * - üü© –î–æ–¥–∞–Ω–æ —Ä–∞–∑–æ–≤—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –∫–µ—à—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ (–∑ v3.0) –¥–ª—è –º–∏—Ç—Ç—î–≤–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è.
 * - üü© –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ –ª–æ–≥—ñ–∫—É —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –∑–∞ —Ä–æ–∫–æ–º (–¥–æ–∑–≤–æ–ª–µ–Ω–æ —Ä—ñ–∑–Ω–∏—Ü—é –≤ 1 —Ä—ñ–∫).
 * - üü• –í–∏–¥–∞–ª–µ–Ω–æ –∞—Ç—Ä–∏–±—É—Ç `data-ltf-tracks-processed` —Ç–∞ –ª–æ–≥—ñ–∫—É `retry` —è–∫ –Ω–µ–ø–æ—Ç—Ä—ñ–±–Ω—ñ.
 */
(function() {
    'use strict'; // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—É–≤–æ—Ä–∏–π —Ä–µ–∂–∏–º –¥–ª—è –∫—Ä–∞—â–æ—ó —è–∫–æ—Å—Ç—ñ –∫–æ–¥—É —Ç–∞ –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫.

    // ===================== –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø –ü–õ–ê–ì–Ü–ù–ê (LTF - Lampa Track Finder) =====================
    
    // SVG –ø—Ä–∞–ø–æ—Ä –£–∫—Ä–∞—ó–Ω–∏ –∑–∞–º—ñ—Å—Ç—å –µ–º–æ–¥–∑—ñ
    var ukraineFlagSVG = '<svg class="flag-svg" viewBox="0 0 20 15"><rect width="20" height="7.5" y="0" fill="#0057B7"/><rect width="20" height="7.5" y="7.5" fill="#FFD700"/></svg>';
    
    var LTF_CONFIG = {
        // --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–µ—à—É ---
        CACHE_VERSION: 3, // –í–µ—Ä—Å—ñ—è –∫–µ—à—É. –ó–º—ñ–Ω—ñ—Ç—å, —è–∫—â–æ —Ö–æ—á–µ—Ç–µ —Å–∫–∏–Ω—É—Ç–∏ —Å—Ç–∞—Ä—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ.
        CACHE_KEY: 'lampa_ukr_tracks_cache', // –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–ª—é—á –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∫–µ—à—É –≤ LocalStorage.
        CACHE_VALID_TIME_MS: 12 * 60 * 60 * 1000, // –ß–∞—Å –∂–∏—Ç—Ç—è –∫–µ—à—É (12 –≥–æ–¥–∏–Ω).
        CACHE_REFRESH_THRESHOLD_MS: 6 * 60 * 60 * 1000, // –ß–µ—Ä–µ–∑ —Å–∫—ñ–ª—å–∫–∏ —á–∞—Å—É –∫–µ—à –ø–æ—Ç—Ä–µ–±—É—î —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è (6 –≥–æ–¥–∏–Ω).

        // --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è ---
        LOGGING_GENERAL: false, // –ó–∞–≥–∞–ª—å–Ω—ñ –ª–æ–≥—ñ —Ä–æ–±–æ—Ç–∏ –ø–ª–∞–≥—ñ–Ω–∞.
        LOGGING_TRACKS: false, // –õ–æ–≥–∏, —â–æ —Å—Ç–æ—Å—É—é—Ç—å—Å—è –ø—Ä–æ—Ü–µ—Å—É –ø–æ—à—É–∫—É —Ç–∞ –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É –¥–æ—Ä—ñ–∂–æ–∫.
        LOGGING_CARDLIST: false, // –õ–æ–≥–∏ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏ –∫–∞—Ä—Ç–æ–∫ —É —Å–ø–∏—Å–∫–∞—Ö.

        // --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è API —Ç–∞ –º–µ—Ä–µ–∂—ñ ---
        JACRED_PROTOCOL: 'http://', // –ü—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è API JacRed.
        JACRED_URL: 'jacred.xyz', // –î–æ–º–µ–Ω API JacRed.
        PROXY_LIST: [ // –°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å—ñ-—Å–µ—Ä–≤–µ—Ä—ñ–≤ –¥–ª—è –æ–±—Ö–æ–¥—É CORS-–æ–±–º–µ–∂–µ–Ω—å.
            'http://api.allorigins.win/raw?url=',
            'http://cors.bwa.workers.dev/'
        ],
        PROXY_TIMEOUT_MS: 3500, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–∫—Å—ñ (3.5 —Å–µ–∫—É–Ω–¥–∏).
        MAX_PARALLEL_REQUESTS: 10,
        MAX_RETRY_ATTEMPTS: 2,

        // --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É ---
        SHOW_TRACKS_FOR_TV_SERIES: true, // –ß–∏ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –º—ñ—Ç–∫–∏ –¥–ª—è —Å–µ—Ä—ñ–∞–ª—ñ–≤ (true –∞–±–æ false)

        // ‚úÖ –ù–û–í–ï: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        DISPLAY_MODE: 'flag', // –†–µ–∂–∏–º –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è: 'text' (Ukr) –∞–±–æ 'flag' (üá∫üá¶)

        //–î–û–î–ê–ù–û: –†—É—á–Ω—ñ –ø–µ—Ä–µ–≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –¥–æ—Ä—ñ–∂–æ–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö ID –∫–æ–Ω—Ç–µ–Ω—Ç—É ===
        MANUAL_OVERRIDES: {
            '207703': { track_count: 1 },    //‚úÖ–ü—Ä–∏–º—É—Å–æ–≤–æ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ Ukr –¥–ª—è —Ü—å–æ–≥–æ ID
            '1195518': { track_count: 2 },   //‚úÖ–ü—Ä–∏–º—É—Å–æ–≤–æ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ 2xUkr –¥–ª—è —Ü—å–æ–≥–æ ID
            '215995': { track_count: 2 },    //‚úÖ–ü—Ä–∏–º—É—Å–æ–≤–æ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ 2xUkr –¥–ª—è —Ü—å–æ–≥–æ ID
            '1234821': { track_count: 2 },   //‚úÖ–ü—Ä–∏–º—É—Å–æ–≤–æ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ 2xUkr –¥–ª—è —Ü—å–æ–≥–æ ID
            '933260': { track_count: 3 },    //‚úÖ–ü—Ä–∏–º—É—Å–æ–≤–æ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ 3xUkr –¥–ª—è —Ü—å–æ–≥–æ ID
            '245827': { track_count: 0 }     //‚úÖ–ü—Ä–∏–º—É—Å–æ–≤–æ –Ω–µ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ Ukr –¥–ª—è —Ü—å–æ–≥–æ ID
            /*'933260': { track_count: 3 }*/     //‚úÖ–ü—Ä–∏–º—É—Å–æ–≤–æ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ 3xUkr –¥–ª—è —Ü—å–æ–≥–æ ID
            /*'–¢—É—Ç ID —Ñ—ñ–ª—å–º—É': { track_count: 0 },*/   //‚úÖ–ü—Ä–∏–º—É—Å–æ–≤–æ –ø—Ä–∏—Ö–æ–≤—É–≤–∞—Ç–∏ –º—ñ—Ç–∫—É –¥–ª—è —Ü—å–æ–≥–æ ID
            /*'–¢—É—Ç ID —Ñ—ñ–ª—å–º—É': { track_count: 3 }*/    //‚úÖ–ü—Ä–∏–º—É—Å–æ–≤–æ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ 3xUkr –¥–ª—è —Ü—å–æ–≥–æ ID
        }
        // –ö–Ü–ù–ï–¶–¨ –ø–µ—Ä–µ–≤–∏–∑–Ω–∞—á–µ–Ω—å
    
    };

    // ======== –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ï –°–ö–ò–î–ê–ù–ù–Ø –°–¢–ê–†–û–ì–û –ö–ï–®–£ –ü–†–ò –û–ù–û–í–õ–ï–ù–ù–Ü ========
    (function resetOldCache() {
        var cache = Lampa.Storage.get(LTF_CONFIG.CACHE_KEY) || {};
        var hasOld = Object.keys(cache).some(k => !k.startsWith(LTF_CONFIG.CACHE_VERSION + '_'));
            if (hasOld) {
            console.log('UA-Finder: –æ—á–∏—â–µ–Ω–æ —Å—Ç–∞—Ä–∏–π –∫–µ—à –¥–æ—Ä—ñ–∂–æ–∫');
            Lampa.Storage.set(LTF_CONFIG.CACHE_KEY, {});
            }
    })();
    
// ===================== –°–¢–ò–õ–Ü CSS =====================
// –¶–µ–π –±–ª–æ–∫ —Å—Ç–≤–æ—Ä—é—î —Ç–∞ –¥–æ–¥–∞—î –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Å—Ç–∏–ª—ñ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º—ñ—Ç–æ–∫.
var styleTracks = "<style id=\"lampa_tracks_styles\">" +
    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–∑–∏—Ü—ñ–æ–Ω—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–æ—Å—Ç–µ—Ä–∞
    ".card__view { position: relative; }" +

    // –°—Ç–∏–ª—å –¥–ª—è –º—ñ—Ç–∫–∏ –∑ –¥–æ—Ä—ñ–∂–∫–∞–º–∏
    ".card__tracks {" +
    " position: absolute !important; " + // –ê–±—Å–æ–ª—é—Ç–Ω–µ –ø–æ–∑–∏—Ü—ñ–æ–Ω—É–≤–∞–Ω–Ω—è –≤—ñ–¥–Ω–æ—Å–Ω–æ .card__view
    " right: 0.3em !important; " + // –í—ñ–¥—Å—Ç—É–ø –ø—Ä–∞–≤–æ—Ä—É—á
    " left: auto !important; " + // –°–∫–∏–¥–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ–æ–Ω—É–≤–∞–Ω–Ω—è –∑–ª—ñ–≤–∞
    " top: 0.3em !important; " + // –ü–æ–∑–∏—Ü—ñ—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º (–∫–æ–ª–∏ RatingUp –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π)
    " background: rgba(0,0,0,0.5) !important;" + // –ù–∞–ø—ñ–≤–ø—Ä–æ–∑–æ—Ä–∏–π —á–æ—Ä–Ω–∏–π —Ñ–æ–Ω
    " color: #FFFFFF !important;" + // –ë—ñ–ª–∏–π –∫–æ–ª—ñ—Ä —Ç–µ–∫—Å—Ç—É
    " font-size: 1.3em !important;" + // –†–æ–∑–º—ñ—Ä —à—Ä–∏—Ñ—Ç—É
    " padding: 0.2em 0.5em !important;" + // –í–Ω—É—Ç—Ä—ñ—à–Ω—ñ –≤—ñ–¥—Å—Ç—É–ø–∏
    " border-radius: 1em !important;" + // –ó–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—è –∫—É—Ç—ñ–≤
    " font-weight: 700 !important;" + // –ñ–∏—Ä–Ω–∏–π —à—Ä–∏—Ñ—Ç
    " z-index: 20 !important;" + // –í–∏—Å–æ–∫–∏–π z-index, —â–æ–± –±—É—Ç–∏ –ø–æ–≤–µ—Ä—Ö —ñ–Ω—à–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
    " width: fit-content !important; " + // –®–∏—Ä–∏–Ω–∞ –∑–∞ –≤–º—ñ—Å—Ç–æ–º
    " max-width: calc(100% - 1em) !important; " + // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —à–∏—Ä–∏–Ω–∞
    " overflow: hidden !important;" + // –ü—Ä–∏—Ö–æ–≤—É–≤–∞—Ç–∏ –≤—Å–µ, —â–æ –≤–∏—Ö–æ–¥–∏—Ç—å –∑–∞ –º–µ–∂—ñ
    "}" +

    // –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –∫–ª–∞—Å, —è–∫–∏–π –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è –¥–∏–Ω–∞–º—ñ—á–Ω–æ, —è–∫—â–æ –ø–ª–∞–≥—ñ–Ω RatingUp –∞–∫—Ç–∏–≤–Ω–∏–π
    ".card__tracks.positioned-below-rating {" +
    " top: 1.85em !important; " + // –í–µ—Ä—Å—ñ—è –ø–æ–∑–∏—Ü—ñ—ó, —â–æ–± –∑–º—ñ—Å—Ç–∏—Ç–∏—Å—è –Ω–∏–∂—á–µ —Ä–µ–π—Ç–∏–Ω–≥—É
    "}" +
    
    // –°—Ç–∏–ª—å –¥–ª—è —Ç–µ–∫—Å—Ç—É –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –º—ñ—Ç–∫–∏
    ".card__tracks div {" +
    " text-transform: none !important; " + // –ë–µ–∑ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —É –≤–µ–ª–∏–∫—ñ –ª—ñ—Ç–µ—Ä–∏
    " font-family: 'Roboto Condensed', 'Arial Narrow', Arial, sans-serif !important; " + // –®—Ä–∏—Ñ—Ç
    " font-weight: 700 !important; " + // –ñ–∏—Ä–Ω—ñ—Å—Ç—å
    " letter-spacing: 0.1px !important; " + // –ú—ñ–∂–ª—ñ—Ç–µ—Ä–Ω–∞ –≤—ñ–¥—Å—Ç–∞–Ω—å
    " font-size: 1.05em !important; " + // –†–æ–∑–º—ñ—Ä —à—Ä–∏—Ñ—Ç—É
    " color: #FFFFFF !important;" + // –ö–æ–ª—ñ—Ä —Ç–µ–∫—Å—Ç—É
    " padding: 0 !important; " + // –°–∫–∏–¥–∞–Ω–Ω—è –≤—ñ–¥—Å—Ç—É–ø—ñ–≤ (–≤–æ–Ω–∏ –≤ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–º—É –µ–ª–µ–º–µ–Ω—Ç—ñ)
    " white-space: nowrap !important;" + // –ó–∞–±–æ—Ä–æ–Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å—É —Ä—è–¥–∫–∞
    " display: flex !important; " + // Flex-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    " align-items: center !important; " + // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–µ –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è
    " gap: 4px !important; " + // –í—ñ–¥—Å—Ç–∞–Ω—å –º—ñ–∂ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏
    " text-shadow: 0.5px 0.5px 1px rgba(0,0,0,0.3) !important; " + // –¢—ñ–Ω—å –¥–ª—è —Ç–µ–∫—Å—Ç—É
    "}" +
    
    // –°—Ç–∏–ª—ñ –¥–ª—è –ø—Ä–∞–ø–æ—Ä–∞ - —Ç–æ—á–Ω–µ –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è
    ".card__tracks .flag-svg {" +
    " display: inline-block;" +
    " vertical-align: middle;" +
    " width: 1.6em;" +
    " height: 0.9em;" +
    " margin-right: -0.1em;" + // –ó–º–µ–Ω—à—É—î–º–æ –≤—ñ–¥—Å—Ç—É–ø —Å–ø—Ä–∞–≤–∞
    " margin-left: -0.1em;" + //  –ó–º–µ–Ω—à—É—î–º–æ –≤—ñ–¥—Å—Ç—É–ø –∑–ª—ñ–≤–∞
    " margin-top: 0em;" + // –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∏–π –≤—ñ–¥—Å—Ç—É–ø
    "}" +
    "</style>";
// –î–æ–¥–∞—î–º–æ —Å—Ç–∏–ª—ñ –≤ DOM –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –ø–ª–∞–≥—ñ–Ω–∞.
Lampa.Template.add('lampa_tracks_css', styleTracks);
$('body').append(Lampa.Template.get('lampa_tracks_css', {}, true));

    // ===================== –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –ß–ï–†–ì–û–Æ –ó–ê–ü–ò–¢–Ü–í =====================
    var requestQueue = [];
    var activeRequests = 0;
    var networkHealth = 1.0;

    function enqueueTask(fn) {
        requestQueue.push(fn);
        processQueue();
    }

    function processQueue() {
        var adaptiveLimit = Math.max(3, Math.min(LTF_CONFIG.MAX_PARALLEL_REQUESTS, Math.floor(LTF_CONFIG.MAX_PARALLEL_REQUESTS * networkHealth)));
        
        if (activeRequests >= adaptiveLimit) return;
        var task = requestQueue.shift();
        if (!task) return;

        activeRequests++;
        try {
            task(function onTaskDone() {
                activeRequests--;
                setTimeout(processQueue, 0);
            });
        } catch (e) {
            console.error("LTF-LOG", "–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è –∑ —á–µ—Ä–≥–∏:", e);
            activeRequests--;
            setTimeout(processQueue, 0);
        }
    }

    function updateNetworkHealth(success) {
        if (success) {
            networkHealth = Math.min(1.0, networkHealth + 0.1);
        } else {
            networkHealth = Math.max(0.3, networkHealth - 0.2);
        }
        if (LTF_CONFIG.LOGGING_GENERAL) console.log("LTF-LOG", "–û–Ω–æ–≤–ª–µ–Ω–æ –∑–¥–æ—Ä–æ–≤'—è –º–µ—Ä–µ–∂—ñ:", networkHealth);
    }

    // ===================== –ú–ï–†–ï–ñ–ï–í–Ü –§–£–ù–ö–¶–Ü–á =====================
    function fetchWithProxy(url, cardId, callback) {
        var currentProxyIndex = 0;
        var callbackCalled = false;

        function tryNextProxy() {
            if (currentProxyIndex >= LTF_CONFIG.PROXY_LIST.length) {
                if (!callbackCalled) {
                    callbackCalled = true;
                    updateNetworkHealth(false);
                    callback(new Error('–í—Å—ñ –ø—Ä–æ–∫—Å—ñ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏ –¥–ª—è ' + url));
                }
                return;
            }
            var proxyUrl = LTF_CONFIG.PROXY_LIST[currentProxyIndex] + encodeURIComponent(url);
            
            var timeoutId = setTimeout(function() {
                if (!callbackCalled) {
                    currentProxyIndex++;
                    tryNextProxy();
                }
            }, LTF_CONFIG.PROXY_TIMEOUT_MS);

            fetch(proxyUrl)
                .then(function(response) {
                    clearTimeout(timeoutId);
                    if (!response.ok) throw new Error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–æ–∫—Å—ñ: ' + response.status);
                    return response.text();
                })
                .then(function(data) {
                    if (!callbackCalled) {
                        callbackCalled = true;
                        updateNetworkHealth(true);
                        callback(null, data);
                    }
                })
                .catch(function(error) {
                    clearTimeout(timeoutId);
                    if (!callbackCalled) {
                        currentProxyIndex++;
                        tryNextProxy();
                    }
                });
        }
        tryNextProxy();
    }
    
    // ===================== –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á =====================
    function getCardType(cardData) {
        var type = cardData.media_type || cardData.type;
        if (type === 'movie' || type === 'tv') return type;
        return cardData.name || cardData.original_name ? 'tv' : 'movie';
    }

    // ===================== –û–°–ù–û–í–ù–ê –õ–û–ì–Ü–ö–ê –ü–Ü–î–†–ê–•–£–ù–ö–£ –î–û–†–Ü–ñ–û–ö =====================
    function countUkrainianTracks(title) {
        if (!title) return 0;
        let cleanTitle = title.toLowerCase();
        
        const subsIndex = cleanTitle.indexOf('sub');
        if (subsIndex !== -1) {
            cleanTitle = cleanTitle.substring(0, subsIndex);
        }

        const multiTrackMatch = cleanTitle.match(/(\d+)x\s*ukr/);
        if (multiTrackMatch && multiTrackMatch[1]) {
            return parseInt(multiTrackMatch[1], 10);
        }

        const singleTrackMatches = cleanTitle.match(/\bukr\b/g);
        if (singleTrackMatches) {
            return singleTrackMatches.length;
        }

        return 0;
    }

    /**
     * ‚úÖ –û–ù–û–í–õ–ï–ù–û
     * –§–æ—Ä–º–∞—Ç—É—î —Ç–µ–∫—Å—Ç –º—ñ—Ç–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –¥–æ—Ä—ñ–∂–æ–∫ —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è DISPLAY_MODE.
     * @param {number} count - –ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ—Ä—ñ–∂–æ–∫.
     * @returns {string|null} - –¢–µ–∫—Å—Ç –º—ñ—Ç–∫–∏ ("Ukr", "2xUkr", "üá∫üá¶", "2xüá∫üá¶") –∞–±–æ null.
     */
    function formatTrackLabel(count) {
        if (!count || count === 0) return null; // –ù–µ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –º—ñ—Ç–∫—É, —è–∫—â–æ –¥–æ—Ä—ñ–∂–æ–∫ 0.
    
        // –í–∏–±–∏—Ä–∞—î–º–æ –º—ñ—Ç–∫—É –∑–≥—ñ–¥–Ω–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        if (LTF_CONFIG.DISPLAY_MODE === 'flag') {
            // –†–µ–∂–∏–º –ø—Ä–∞–ø–æ—Ä–∞ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ SVG
            if (count === 1) return ukraineFlagSVG; // –ü–æ–≤–µ—Ä–Ω–µ SVG –ø—Ä–∞–ø–æ—Ä
            return `${count}x${ukraineFlagSVG}`; // –ü–æ–≤–µ—Ä–Ω–µ '2x[SVG –ø—Ä–∞–ø–æ—Ä]'
        } else {
            // –†–µ–∂–∏–º —Ç–µ–∫—Å—Ç—É - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–µ–∫—Å—Ç "Ukr"
            if (count === 1) return 'Ukr'; // –ü–æ–≤–µ—Ä–Ω–µ 'Ukr'
            return `${count}xUkr`; // –ü–æ–≤–µ—Ä–Ω–µ '2xUkr'
        }
    }

    // ===================== –ü–û–®–£–ö –ù–ê JACRED =====================
    function getBestReleaseWithUkr(normalizedCard, cardId, callback) {
        enqueueTask(function(done) {

            if (!normalizedCard.release_date || normalizedCard.release_date.toLowerCase().includes('–Ω–µ–≤—ñ–¥–æ–º–æ') || isNaN(new Date(normalizedCard.release_date).getTime())) {
                callback(null);
                done();
                return;
                }
            
            var releaseDate = normalizedCard.release_date ? new Date(normalizedCard.release_date) : null;
            if (releaseDate && releaseDate.getTime() > Date.now()) {
                callback(null);
                done();
                return;
            }

            var year = '';
            if (normalizedCard.release_date && normalizedCard.release_date.length >= 4) {
                year = normalizedCard.release_date.substring(0, 4);
            }
            if (!year || isNaN(parseInt(year, 10))) {
                callback(null);
                done();
                return;
            }
            var searchYearNum = parseInt(year, 10);
            
            function extractYearFromTitle(title) {
                var regex = /(?:^|[^\d])(\d{4})(?:[^\d]|$)/g;
                var match, lastYear = 0;
                var currentYear = new Date().getFullYear();
                while ((match = regex.exec(title)) !== null) {
                    var extractedYear = parseInt(match[1], 10);
                    if (extractedYear >= 1900 && extractedYear <= currentYear + 2) { 
                        lastYear = extractedYear;
                    }
                }
                return lastYear;
            }

            function searchJacredApi(searchTitle, searchYear, apiCallback) {
                var userId = Lampa.Storage.get('lampac_unic_id', '');
                var apiUrl = LTF_CONFIG.JACRED_PROTOCOL + LTF_CONFIG.JACRED_URL + '/api/v1.0/torrents?search=' +
                    encodeURIComponent(searchTitle) +
                    '&year=' + searchYear +
                    '&uid=' + userId;
                
                fetchWithProxy(apiUrl, cardId, function(error, responseText) {
                    if (error || !responseText) {
                        apiCallback(null);
                        return;
                    }
                    try {
                        var torrents = JSON.parse(responseText);
                        if (!Array.isArray(torrents) || torrents.length === 0) {
                            apiCallback(null);
                            return;
                        }

                        let bestTrackCount = 0;
                        let bestFoundTorrent = null;

                        for (let i = 0; i < torrents.length; i++) {
                            const currentTorrent = torrents[i];
                            const torrentTitle = currentTorrent.title.toLowerCase();

                            // --- –î–í–û–†–Ü–í–ù–ï–í–ò–ô –§–Ü–õ–¨–¢–† "–§–Ü–õ–¨–ú/–°–ï–†–Ü–ê–õ" ---
                            const isSeriesTorrent = /(—Å–µ–∑–æ–Ω|season|s\d{1,2}|—Å–µ—Ä–∏–∏|—Å–µ—Ä—ñ—ó|episodes|–µ–ø—ñ–∑–æ–¥|\d{1,2}\s*–∏–∑\s*\d{1,2}|\d+√ó\d+)/.test(torrentTitle);
                            if (normalizedCard.type === 'tv' && !isSeriesTorrent) {
                                if (LTF_CONFIG.LOGGING_TRACKS) console.log(`LTF-LOG [${cardId}]: –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ (—Å—Ö–æ–∂–∏–π –Ω–∞ —Ñ—ñ–ª—å–º –¥–ª—è –∫–∞—Ä—Ç–∫–∏ —Å–µ—Ä—ñ–∞–ª—É):`, currentTorrent.title);
                                continue; 
                            }
                            if (normalizedCard.type === 'movie' && isSeriesTorrent) {
                                if (LTF_CONFIG.LOGGING_TRACKS) console.log(`LTF-LOG [${cardId}]: –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ (—Å—Ö–æ–∂–∏–π –Ω–∞ —Å–µ—Ä—ñ–∞–ª –¥–ª—è –∫–∞—Ä—Ç–∫–∏ —Ñ—ñ–ª—å–º—É):`, currentTorrent.title);
                                continue;
                            }
                            
                            if (normalizedCard.type === 'movie') {
                                const hasStrongSeriesIndicators = /(—Å–µ–∑–æ–Ω|season|s\d|—Å–µ—Ä—ñ—ó|episodes|–µ–ø—ñ–∑–æ–¥|\d+√ó\d+)/i.test(torrentTitle);
                                if (hasStrongSeriesIndicators) {
                                    if (LTF_CONFIG.LOGGING_TRACKS) console.log(`LTF-LOG [${cardId}]: –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ (—á—ñ—Ç–∫—ñ –æ–∑–Ω–∞–∫–∏ —Å–µ—Ä—ñ–∞–ª—É –¥–ª—è –∫–∞—Ä—Ç–∫–∏ —Ñ—ñ–ª—å–º—É):`, currentTorrent.title);
                                    continue;
                                }
                            }
                            
                            // --- –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –ì–ù–£–ß–ö–û–°–¢–Ü –ü–û–®–£–ö–£ –ó–ê –†–û–ö–û–ú ---                            
                            // –¢—É—Ç –º–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ –ø—Ä–∏–ø—É—Å—Ç–∏–º—É —Ä—ñ–∑–Ω–∏—Ü—é —É —Ä–æ–∫–∞—Ö.
                            // > 0 : –¢—ñ–ª—å–∫–∏ —Ç–æ—á–Ω–∏–π –∑–±—ñ–≥ —Ä–æ–∫—É. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Ç–æ—á–Ω—ñ—Å—Ç—å, –∞–ª–µ –º–æ–∂–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç–∏ —Ä–µ–ª—ñ–∑–∏ –Ω–∞ –º–µ–∂—ñ —Ä–æ–∫—ñ–≤.
                            // > 1 : –î–æ–∑–≤–æ–ª—è—î —Ä—ñ–∑–Ω–∏—Ü—é –≤ 1 —Ä—ñ–∫. –†–ï–ö–û–ú–ï–ù–î–û–í–ê–ù–û –¥–ª—è —Å–µ—Ä—ñ–∞–ª—ñ–≤ —Ç–∞ —Ñ—ñ–ª—å–º—ñ–≤ –Ω–∞ –º–µ–∂—ñ —Ä–æ–∫—ñ–≤.
                            // > 3 : –î–æ–∑–≤–æ–ª—è—î —Ä—ñ–∑–Ω–∏—Ü—é –≤ 3 —Ä–æ–∫–∏. –î–æ–±—Ä–µ –¥–ª—è —Ç—Ä–∏–ª–æ–≥—ñ–π, –∞–ª–µ –º–æ–∂–µ —ñ–Ω–æ–¥—ñ –ø–æ–º–∏–ª—è—Ç–∏—Å—å

                            //–®—É–∫–∞—î–º–æ —Ä—ñ–∫ –≤ –Ω–∞–∑–≤—ñ —Ä–µ–ª—ñ–∑—É
                            //–°–ø–æ—á–∞—Ç–∫—É –±–µ—Ä–µ —Ä—ñ–∫ —ñ–∑ –Ω–∞–∑–≤–∏ —Ä–µ–ª—ñ–∑—É (extractYearFromTitle), 
                            //–∞ –ø–æ—Ç—ñ–º —ñ–∑ –ø–æ–ª—è relased, —è–∫—â–æ –≤ –Ω–∞–∑–≤—ñ —Ä–æ–∫—É –Ω–µ–º–∞—î.
                            var parsedYear = extractYearFromTitle(currentTorrent.title) || parseInt(currentTorrent.relased, 10);
                            var yearDifference = Math.abs(parsedYear - searchYearNum);
                            
                            // ‚úÖ –î–æ–∑–≤–æ–ª—è—î —Ä—ñ–∑–Ω–∏—Ü—é –≤ 1 —Ä—ñ–∫ (0 –∞–±–æ 1).
                            if (parsedYear > 1900 && yearDifference > 0) {
                                if (LTF_CONFIG.LOGGING_TRACKS) console.log(`LTF-LOG [${cardId}]: –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ (—Ä—ñ–∫ –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—î: ${parsedYear} vs ${searchYearNum}):`, currentTorrent.title);
                                continue;
                            }
                            
                            const currentTrackCount = countUkrainianTracks(currentTorrent.title);
                            
                            if (currentTrackCount > bestTrackCount) {
                                bestTrackCount = currentTrackCount;
                                bestFoundTorrent = currentTorrent;
                            } else if (currentTrackCount === bestTrackCount && bestTrackCount > 0 && bestFoundTorrent && currentTorrent.title.length > bestFoundTorrent.title.length) {
                                bestFoundTorrent = currentTorrent;
                            }
                        }

                        if (bestFoundTorrent) {
                            apiCallback({
                                track_count: bestTrackCount,
                                full_label: bestFoundTorrent.title
                            });
                        } else {
                            apiCallback(null);
                        }
                    } catch (e) {
                        apiCallback(null);
                    }
                });
            }

            // --- –õ–û–ì–Ü–ö–ê –ü–ê–†–ê–õ–ï–õ–¨–ù–û–ì–û –ü–û–®–£–ö–£ ---
            const titlesToSearch = [ normalizedCard.original_title, normalizedCard.title ];
            const uniqueTitles = [...new Set(titlesToSearch)].filter(Boolean);
            if (LTF_CONFIG.LOGGING_TRACKS) console.log('LTF-LOG', `[${cardId}] –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ—à—É–∫ –∑–∞ –Ω–∞–∑–≤–∞–º–∏:`, uniqueTitles);
            const searchPromises = uniqueTitles.map(title => {
                return new Promise(resolve => {
                    searchJacredApi(title, year, resolve);
                });
            });

            Promise.all(searchPromises).then(results => {
                let bestOverallResult = null;
                let maxTrackCount = 0;
                results.forEach(result => {
                    if (!result || !result.track_count) return;
                    if (result.track_count > maxTrackCount) {
                        maxTrackCount = result.track_count;
                        bestOverallResult = result;
                    }
                });
                if (LTF_CONFIG.LOGGING_TRACKS) console.log('LTF-LOG', `[${cardId}] –ù–∞–π–∫—Ä–∞—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑ —É—Å—ñ—Ö –ø–æ—à—É–∫—ñ–≤:`, bestOverallResult);
                callback(bestOverallResult);
                done();
            });
        });
    }

    // ===================== –†–û–ë–û–¢–ê –ó –ö–ï–®–ï–ú =====================
    function getTracksCache(key) {
        var cache = Lampa.Storage.get(LTF_CONFIG.CACHE_KEY) || {};
        var item = cache[key];
        var isCacheValid = item && (Date.now() - item.timestamp < LTF_CONFIG.CACHE_VALID_TIME_MS);
        return isCacheValid ? item : null;
    }

    function saveTracksCache(key, data) {
        var cache = Lampa.Storage.get(LTF_CONFIG.CACHE_KEY) || {};
        cache[key] = {
            track_count: data.track_count,
            timestamp: Date.now()
        };
        Lampa.Storage.set(LTF_CONFIG.CACHE_KEY, cache);
    }
    
// ===================== –û–ù–û–í–õ–ï–ù–ù–Ø –Ü–ù–¢–ï–†–§–ï–ô–°–£ (UI) =====================
function updateCardListTracksElement(cardView, trackCount) {
    const displayLabel = formatTrackLabel(trackCount); // –û—Ç—Ä–∏–º–∞—î '2xUkr' –∞–±–æ SVG –∫–æ–¥
    const existingElement = cardView.querySelector('.card__tracks');
    
    // –Ø–∫—â–æ –º—ñ—Ç–∫–∏ –Ω–µ –º–∞—î –±—É—Ç–∏, –∞ –≤–æ–Ω–∞ —î - –≤–∏–¥–∞–ª—è—î–º–æ.
    if (!displayLabel) {
        if (existingElement) existingElement.remove();
        return;
    }
    
    // –Ø–∫—â–æ –º—ñ—Ç–∫–∞ –≤–∂–µ —î —ñ –≤–º—ñ—Å—Ç —Ç–æ–π —Å–∞–º–∏–π - –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ.
    if (existingElement && existingElement.innerHTML === displayLabel) {
        return;
    }
    
    // –í —ñ–Ω—à–∏—Ö –≤–∏–ø–∞–¥–∫–∞—Ö - –≤–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—É (—è–∫—â–æ —î) —ñ –º–∞–ª—é—î–º–æ –Ω–æ–≤—É.
    if (existingElement) existingElement.remove();
    
    const trackDiv = document.createElement('div');
    trackDiv.className = 'card__tracks';

    const parentCard = cardView.closest('.card');
    if (parentCard) {
        const voteElement = parentCard.querySelector('.card__vote');
        if (voteElement) {
             const topStyle = getComputedStyle(voteElement).top;
             if (topStyle !== 'auto' && parseInt(topStyle) < 100) {
                 trackDiv.classList.add('positioned-below-rating');
             }
        }
    }
    
    // –ó–ú–Ü–ù–ê: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ innerHTML –∑–∞–º—ñ—Å—Ç—å textContent –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è SVG
    const innerElement = document.createElement('div');
    innerElement.innerHTML = displayLabel; //–ó–ú–Ü–ù–ê!
    trackDiv.appendChild(innerElement);
    cardView.appendChild(trackDiv);
}
    // ===================== –ì–û–õ–û–í–ù–ò–ô –û–ë–†–û–ë–ù–ò–ö –ö–ê–†–¢–û–ö =====================
    /**
     * üü© –ù–û–í–ê –õ–û–ì–Ü–ö–ê (–Ü–î–ï–ú–ü–û–¢–ï–ù–¢–ù–ê)
     * –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –º–æ–∂–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏—Å—å –¥–ª—è –æ–¥–Ω—ñ—î—ó –∫–∞—Ä—Ç–∫–∏ –±–∞–≥–∞—Ç–æ —Ä–∞–∑—ñ–≤.
     * –í–æ–Ω–∞ —Å–∞–º–∞ –≤–∏—Ä—ñ—à—É—î, —â–æ —Ä–æ–±–∏—Ç–∏, –±–∞–∑—É—é—á–∏—Å—å –Ω–∞ —Å—Ç–∞–Ω—ñ –∫–µ—à—É.
     * 1. –ù–µ–º–∞—î –∫–µ—à—É? -> –†–æ–±–∏–º–æ –ø–æ—à—É–∫, –º–∞–ª—é—î–º–æ.
     * 2. –ö–µ—à —Å–≤—ñ–∂–∏–π? -> –ú–∞–ª—é—î–º–æ –∑ –∫–µ—à—É.
     * 3. –ö–µ—à –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–π? -> –ú–∞–ª—é—î–º–æ –∑ –∫–µ—à—É + –∑–∞–ø—É—Å–∫–∞—î–º–æ —Ñ–æ–Ω–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.
     * –¶–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–ø—Ä–∞–≤–ª—è—î —ñ "–∑–Ω–∏–∫–Ω–µ–Ω–Ω—è" –º—ñ—Ç–æ–∫, —ñ "–ø—Ä–∏–º–∞—Ä–Ω—ñ" –º—ñ—Ç–∫–∏.
     */
    function processListCard(cardElement) {
        if (!cardElement || !cardElement.isConnected || !document.body.contains(cardElement)) {
            return;
        }

        var cardData = cardElement.card_data;
        var cardView = cardElement.querySelector('.card__view');
        if (!cardData || !cardView) return;

        var isTvSeries = (getCardType(cardData) === 'tv');
        if (isTvSeries && !LTF_CONFIG.SHOW_TRACKS_FOR_TV_SERIES) return;

        var normalizedCard = {
            id: cardData.id || '',
            title: cardData.title || cardData.name || '',
            original_title: cardData.original_title || cardData.original_name || '',
            type: getCardType(cardData),
            release_date: cardData.release_date || cardData.first_air_date || ''
        };
        var cardId = normalizedCard.id;
        var cacheKey = `${LTF_CONFIG.CACHE_VERSION}_${normalizedCard.type}_${cardId}`;

        // 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä—É—á–Ω–∏—Ö –ø–µ—Ä–µ–≤–∏–∑–Ω–∞—á–µ–Ω—å (–º–∞—é—Ç—å –Ω–∞–π–≤–∏—â–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç)
        var manualOverrideData = LTF_CONFIG.MANUAL_OVERRIDES[cardId];
        if (manualOverrideData) {
            if (LTF_CONFIG.LOGGING_TRACKS) console.log(`LTF-LOG [${cardId}]: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Ä—É—á–Ω–µ –ø–µ—Ä–µ–≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è:`, manualOverrideData);
            updateCardListTracksElement(cardView, manualOverrideData.track_count);
            return; // –ù–µ –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É –æ–±—Ä–æ–±–∫—É
        }

        // 2. –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ –∫–µ—à—É
        var cachedData = getTracksCache(cacheKey);

        // 3. –í–∏—Ä—ñ—à—É—î–º–æ, —â–æ —Ä–æ–±–∏—Ç–∏
        if (cachedData) {
            // --- –ö–ï–® –Ü–°–ù–£–Ñ ---
            
            // 3a. –ú–∞–ª—é—î–º–æ –º—ñ—Ç–∫—É –∑ –∫–µ—à—É (—Ü–µ —Ç–∞–∫–æ–∂ "–∞–≤—Ç–æ–∑—Ü—ñ–ª–µ–Ω–Ω—è")
            updateCardListTracksElement(cardView, cachedData.track_count);
            
            // 3b. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ —á–∞—Å –æ–Ω–æ–≤–∏—Ç–∏ –∫–µ—à —É —Ñ–æ–Ω—ñ (–≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è "–ø—Ä–∏–º–∞—Ä")
            if (Date.now() - cachedData.timestamp > LTF_CONFIG.CACHE_REFRESH_THRESHOLD_MS) {
                if (LTF_CONFIG.LOGGING_TRACKS) console.log(`LTF-LOG [${cardId}]: –ö–µ—à –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–π, —Ñ–æ–Ω–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è...`);
                
                getBestReleaseWithUkr(normalizedCard, cardId, function(liveResult) {
                    let trackCount = liveResult ? liveResult.track_count : 0;
                    saveTracksCache(cacheKey, { track_count: trackCount });
                    
                    // –û–Ω–æ–≤–ª—é—î–º–æ UI, –ª–∏—à–µ —è–∫—â–æ –∫–∞—Ä—Ç–∫–∞ —â–µ —ñ—Å–Ω—É—î
                    if (document.body.contains(cardElement)) {
                        updateCardListTracksElement(cardView, trackCount);
                    }
                });
            }
        } else {
            // --- –ö–ï–®–£ –ù–ï–ú–ê–Ñ (–∞–±–æ –≤—ñ–Ω –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π) ---
            if (LTF_CONFIG.LOGGING_TRACKS) console.log(`LTF-LOG [${cardId}]: –ö–µ—à –≤—ñ–¥—Å—É—Ç–Ω—ñ–π, –Ω–æ–≤–∏–π –ø–æ—à—É–∫...`);
            
            getBestReleaseWithUkr(normalizedCard, cardId, function(liveResult) {
                let trackCount = liveResult ? liveResult.track_count : 0;
                saveTracksCache(cacheKey, { track_count: trackCount });
                
                if (document.body.contains(cardElement)) {
                    updateCardListTracksElement(cardView, trackCount);
                }
            });
        }
    }
    
    // ===================== –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –ü–õ–ê–ì–Ü–ù–ê =====================
    // ‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥ –∑ v2.7
    var observerDebounceTimer = null;
    var cardsToProcess = [];

    function debouncedProcessCards() {
        clearTimeout(observerDebounceTimer);
        observerDebounceTimer = setTimeout(function() {
            const batch = [...new Set(cardsToProcess)]; // –í–∏–¥–∞–ª—è—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏
            cardsToProcess = [];
            
            if (LTF_CONFIG.LOGGING_CARDLIST) console.log("LTF-LOG: –û–±—Ä–æ–±–∫–∞ –ø–∞—á–∫–∏ –∑", batch.length, "–∫–∞—Ä—Ç–æ–∫.");

            var BATCH_SIZE = 12;
            var DELAY_MS = 30;

            function processBatch(startIndex) {
                var currentBatch = batch.slice(startIndex, startIndex + BATCH_SIZE);
                
                currentBatch.forEach(card => {
                    if (card.isConnected && document.body.contains(card)) {
                        processListCard(card);
                    }
                });
                
                var nextIndex = startIndex + BATCH_SIZE;
                if (nextIndex < batch.length) {
                    setTimeout(function() {
                        processBatch(nextIndex);
                    }, DELAY_MS);
                }
            }
            
            if (batch.length > 0) {
                processBatch(0);
            }
            
        }, 150); // –ó–∞—Ç—Ä–∏–º–∫–∞ –≤ 150 –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥.
    }

    // MutationObserver - —Å–ª—ñ–¥–∫—É—î –∑–∞ –ø–æ—è–≤–æ—é –Ω–æ–≤–∏—Ö –∫–∞—Ä—Ç–æ–∫.
    var observer = new MutationObserver(function(mutations) {
        let newCardsFound = false;
        mutations.forEach(function(mutation) {
            if (mutation.addedNodes) {
                mutation.addedNodes.forEach(function(node) {
                    if (node.nodeType === 1) { 
                        if (node.classList && node.classList.contains('card')) {
                            cardsToProcess.push(node);
                            newCardsFound = true;
                        }
                        const nestedCards = node.querySelectorAll('.card');
                        if (nestedCards.length) {
                           nestedCards.forEach(card => cardsToProcess.push(card));
                           newCardsFound = true;
                        }
                    }
                });
            }
        });
        
        if (newCardsFound) {
            debouncedProcessCards();
        }
    });

    /**
     * –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó, —è–∫–∞ –∑–∞–ø—É—Å–∫–∞—î –≤–µ—Å—å –º–µ—Ö–∞–Ω—ñ–∑–º.
     */
    function initializeLampaTracksPlugin() {
        if (window.lampaTrackFinderPlugin) return;
        window.lampaTrackFinderPlugin = true;

        // –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—á DOM
        var containers = document.querySelectorAll('.cards, .card-list, .content, .main, .cards-list, .preview__list');
        if (containers.length) {
            containers.forEach(container => observer.observe(container, { childList: true, subtree: true }));
        } else {
            observer.observe(document.body, { childList: true, subtree: true });
        }

        // ===============================================================
        // üü© –†–∞–∑–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–µ—à—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ (–≤–∑—è—Ç–æ –∑ v3.0)
        // –ú–∏—Ç—Ç—î–≤–æ –≤—ñ–¥–Ω–æ–≤–ª—é—î –º—ñ—Ç–∫–∏ –¥–ª—è –∫–∞—Ä—Ç–æ–∫, —â–æ –≤–∂–µ —î –Ω–∞ –µ–∫—Ä–∞–Ω—ñ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É.
        // ===============================================================
        setTimeout(function () {
            const allCards = document.querySelectorAll('.card');
            if (LTF_CONFIG.LOGGING_GENERAL && allCards.length > 0) {
                 console.log(`UA-Finder: –†–∞–∑–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–µ—à—É –¥–ª—è ${allCards.length} –∫–∞—Ä—Ç–æ–∫...`);
            }
            allCards.forEach(card => {
                if (card.card_data && card.querySelector('.card__view')) {
                    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—É –∂ –ª–æ–≥—ñ–∫—É, —â–æ –π observer,
                    // —Ü–µ –≥–∞—Ä–∞–Ω—Ç—É—î –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ –∫–µ—à—É –∞–±–æ —Ñ–æ–Ω–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.
                    processListCard(card);
                }
            });
        }, 1200); // –ß–µ—Ä–µ–∑ 1.2 —Å–µ–∫—É–Ω–¥–∏ –ø—ñ—Å–ª—è —Å—Ç–∞—Ä—Ç—É Lampa

        if (LTF_CONFIG.LOGGING_GENERAL) console.log("LTF-LOG: –ü–ª–∞–≥—ñ–Ω –ø–æ—à—É–∫—É —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –¥–æ—Ä—ñ–∂–æ–∫ (v3.2) —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ!");
    }

    // –ó–∞–ø—É—Å–∫–∞—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ, –∫–æ–ª–∏ DOM –±—É–¥–µ –≥–æ—Ç–æ–≤–∏–π.
    if (document.body) {
        initializeLampaTracksPlugin();
    } else {
        document.addEventListener('DOMContentLoaded', initializeLampaTracksPlugin);
    }
})();
